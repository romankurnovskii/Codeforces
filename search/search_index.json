{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Codeforces Solutions"},{"location":"#build","title":"Build","text":"<pre><code>python -m venv .venv\n. ./.venv/bin/activate\npip install -r requirements.txt\npython parse_solutions.py\n\nmkdocs serve\nmkdocs build\n</code></pre>"},{"location":"problems/1742/","title":"1742","text":"<p>Codeforces Round 827 (Div. 4)</p>"},{"location":"problems/1742/#a_sum","title":"A_Sum","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    arr = list(map(int, input().split()))\n    arr.sort()\n    if arr[0] + arr[1] == arr[2]:\n        print('YES')\n    else:\n        print('NO')\n</code></pre>"},{"location":"problems/1742/#b_increasing","title":"B_Increasing","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(\"YES\" if len(set(arr)) == n else \"NO\")\n</code></pre>"},{"location":"problems/1742/#c_stripes","title":"C_Stripes","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    input()\n    grid = [input() for _ in range(8)]\n    for row in grid:\n        if all(c == 'R' for c in row):\n            print('R')\n            break\n    else:\n        print('B')\n</code></pre>"},{"location":"problems/1742/#d_coprime","title":"D_Coprime","text":"<pre><code>import math\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    ss = [-1] * 1001\n    for i in range(n):\n        ss[s[i]] = i\n    res = -1\n    for i in range(1, 1001):\n        if ss[i] == -1:\n            continue\n        for j in range(i, 1001):\n            if ss[j] != -1 and math.gcd(i, j) == 1:\n                res = max(res, ss[i] + ss[j] + 2)\n    print(res)\n</code></pre>"},{"location":"problems/1742/#e_scuza","title":"E_Scuza","text":"<pre><code>from bisect import bisect\n\nt = int(input())\n\nfor _ in range(t):\n    n, q = map(int, input().split())\n    input_numbers = list(map(int, input().split()))\n    arr = [0] + input_numbers + [1e9 + 7]  # 1000000007\n    b = list(map(int, input().split()))\n\n    _arr = arr.copy()\n    for i in range(1, n + 2):\n        _arr[i] += _arr[i - 1]\n        arr[i] = max(arr[i], arr[i - 1])\n\n    for i in range(q):\n        b[i] = _arr[bisect(arr, b[i]) - 1]\n\n    print(' '.join(map(str, b)))\n</code></pre>"},{"location":"problems/1742/#f_smaller","title":"F_Smaller","text":"<pre><code>t = int(input())\n\n\ndef lower(x, y):\n    if any(yi &gt; 0 for yi in y[98:]):\n        return True\n\n    if x[97] &lt; y[97] and all(xi == 0 for xi in x[98:]):\n        return True\n\n    return False\n\n\nfor _ in range(t):\n    q = int(input())\n    s = [0] * 128\n    t = [0] * 128\n    s[ord('a')] = 1\n    t[ord('a')] = 1\n\n    for _ in range(q):\n        d, k, x = input().split()\n        d, k = int(d), int(k)\n\n        if d == 1:\n            for c in x:\n                s[ord(c)] += k\n        else:\n            for c in x:\n                t[ord(c)] += k\n\n        print(\"YES\" if lower(s, t) else \"NO\")\n</code></pre>"},{"location":"problems/1742/#g_orray","title":"G_Orray","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = []\n\n    vis = 0\n    while a:\n        # Find the index of the element with the highest bitwise AND with the complement of visited\n        idx = max(range(len(a)), key=lambda i: a[i] &amp; ~vis) \n\n        if not a[idx] &amp; ~vis:\n            break\n\n        res.append(a.pop(idx))\n        vis |= res[-1]\n\n    res.extend(a)\n\n    print(\" \".join(str(x) for x in res))\n</code></pre>"},{"location":"problems/1772/","title":"1772","text":""},{"location":"problems/1772/#a_a_b","title":"A_A_B","text":"<pre><code>def solve():\n    a, b = input().split('+')\n    res = int(a) + int(b)\n\n    print(res)\n\n\nfor _ in range(int(input())):\n    solve()\n</code></pre>"},{"location":"problems/1774/","title":"1774","text":""},{"location":"problems/1774/#a_add_plus_minus_sign","title":"A_Add_Plus_Minus_Sign","text":"<pre><code>def solve():\n    n = int(input())\n    s = input()\n\n    num = int(s[0])\n    res = []\n    for i in range(1, n):\n        if num &gt; 0:\n            res.append('-')\n            num -= int(s[i])\n        else:\n            res.append('+')\n            num += int(s[i])\n    print(''.join(res))\n\nfor _ in range(int(input())):\n    solve()\n</code></pre>"},{"location":"problems/1774/#b_coloring","title":"B_Coloring","text":""},{"location":"problems/1774/#description","title":"Description","text":"<p>Cirno_9baka has a paper tape with n cells in a row. He wants to paint these cells with m different colors. Each color has to be used exactly $a_i$ times. </p> <p>There is a constraint that for every k consecutive cells, their colors have to be distinct. </p> <p>You have to determine if there is a way to paint the cells according to these conditions.</p> <p>Solution Logic:</p> <ol> <li>First, we need to check if the maximum possible color repetitions exceed the number of cells divided by k. If it does, there is no way to color the cells satisfying the conditions.</li> <li>If the above condition is not met, we need to check if the remaining cells after applying the most frequent color can be colored with the other colors while satisfying the k consecutive cells constraint.</li> </ol> <pre><code>from bisect import bisect_left\nfrom math import ceil\n\n\ndef solve():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n\n    max_color_repetitions = ceil(n / k)\n    most_frequent_color = a[-1]\n\n    if most_frequent_color &gt; max_color_repetitions:\n        print(\"NO\")\n        return\n\n    remaining_cells = m - bisect_left(a, most_frequent_color)\n    if most_frequent_color == max_color_repetitions and n % k and remaining_cells &gt; n % k:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n\n\nfor _ in range(int(input())):\n    solve()\n</code></pre>"},{"location":"problems/1774/#c_ice_and_fire","title":"C_Ice_and_Fire","text":""},{"location":"problems/1774/#description_1","title":"Description","text":"<p>There are <code>n</code> players in a game with temperature values ranging from <code>1</code> to <code>n</code>. </p> <ul> <li>The game has <code>n-1</code> environments, each of which is either type <code>0</code> or type <code>1</code>. </li> <li>If an environment is type <code>0</code>, the player with a lower temperature value wins, and if it's type <code>1</code>, the player with a higher temperature value wins. </li> <li>The game is played in a tournament format, with players battling until only one player remains.</li> </ul> <p>For each <code>x</code> from <code>2</code> to <code>n</code>, you need to determine how many players have a chance to win if all players with temperature values not exceeding <code>x</code> participate in the game.</p> <p>Solution Logic:</p> <ol> <li>Initialize a counter and a result list.</li> <li>Loop through the range from <code>1</code> to <code>n-1</code>.</li> <li>If the current environment type is the same as the previous one, increment the counter.</li> <li>If the environment type is different, reset the counter to <code>1</code>.</li> <li>Append the current <code>index + 2 - counter</code> to the result list.</li> <li>Print the result list.</li> </ol> <pre><code>def solve():\n    n = int(input())\n    s = input()\n    counter = 1\n    res = [1]\n\n    for i in range(1, n-1):\n        if s[i] == s[i-1]:\n            counter += 1\n        else:\n            counter = 1\n        res.append(i + 2 - counter)\n\n    print(*res)\n\nfor _ in range(int(input())):\n    solve()\n</code></pre>"},{"location":"problems/1778/","title":"1778","text":""},{"location":"problems/1778/#a_flip_flop_sum","title":"A_Flip_Flop_Sum","text":"<pre><code>def solve():\n    n = int(input())\n    ar = list(map(int, input().split()))\n    res = sum(ar)\n\n    for i in range(n-1):\n        if ar[i] == ar[i+1] == -1:\n            print(res + 4)\n            return\n    if res == n:\n        res -= 4\n    print(res)\n\nfor _ in range(int(input())):\n    solve()\n</code></pre>"},{"location":"problems/1788/","title":"1788","text":""},{"location":"problems/1788/#a_one_and_two","title":"A_One_and_Two","text":"<pre><code>def solve(ar):\n    twos = ar.count(2)\n    if twos % 2 != 0:\n        return -1\n\n    passed_twos = 0\n    need_twos = twos // 2\n    for i, x in enumerate(ar):\n        if x == 2:\n            passed_twos += 1\n        if passed_twos == need_twos:\n            return i+1\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    print(solve(ar))\n</code></pre>"},{"location":"problems/1796/","title":"1796","text":""},{"location":"problems/1796/#b_asterisk_minor_template","title":"B_Asterisk_Minor_Template","text":"<pre><code>def solve():\n    a = input()\n    b = input()\n\n    if a[0] == b[0]:\n        print('YES')\n        print(f'{a[0]}*')\n    elif a[-1] == b[-1]:\n        print('YES')\n        print(f'*{a[-1]}')\n    else:\n        for i in range(len(a)-1):\n            if a[i:i+2] in b:\n                print('YES')\n                print(f'*{a[i:i+2]}*')\n                return\n        print('NO')\n\nfor _ in range(int(input())):\n    solve()\n</code></pre>"},{"location":"problems/1798/","title":"1798","text":""},{"location":"problems/1798/#a_showstopper","title":"A_Showstopper","text":"<pre><code>def solve(a,b,n):\n    a_max = a[0]\n\n    for i in range(n):\n        max_v = max(a[i], b[i])\n        min_v = min(a[i], b[i])\n\n        a[i] = max_v\n        b[i] = min_v\n\n        a_max = max(a_max, max_v)\n\n    if a[-1] &gt;= a_max and b[-1] &gt;= max(b):\n        return 'Yes'\n    return 'No'\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    print(solve(a, b, n))\n</code></pre>"},{"location":"problems/1799/","title":"1799","text":""},{"location":"problems/1799/#a_recent_actions","title":"A_Recent_Actions","text":""},{"location":"problems/1799/#description","title":"Description","text":"<p>Explanation</p> <pre><code>def solve():\n    n, m = list(map(int, input().split()))\n    posts = list(map(int, input().split()))\n    tracked_data = [-1] * n\n\n    last = n-1\n    used_posts = set()\n    for moment, post in enumerate(posts, 1):\n        if post not in used_posts:\n            if last &gt;= 0:\n                tracked_data[last] = moment\n                last -= 1\n                used_posts.add(post)\n    print(*tracked_data)\n\n\nfor _ in range(int(input())):\n    solve()\n</code></pre>"},{"location":"problems/1807/","title":"1807","text":"<p>Codeforces Round 859 (Div. 4)</p> <p>TODO: F, G1, G2</p>"},{"location":"problems/1807/#a_plus_or_minus","title":"A_Plus_or_Minus","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print('+' if a + b == c else '-')\n</code></pre>"},{"location":"problems/1807/#b_grab_the_candies","title":"B_Grab_the_Candies","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n\n    m = 0\n    b = 0\n\n    if n == 1:\n        print('YES' if ar[0] % 2 == 0 else 'NO')\n    else:\n        for x in ar:\n            if x % 2 == 0:\n                m += x\n            else:\n                b += x\n        print('YES' if m &gt; b else 'NO')\n</code></pre>"},{"location":"problems/1807/#c_find_and_replace","title":"C_Find_and_Replace","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = input()\n\n    reserved_binaries = {}\n    binary_values = []\n\n    for c in s:\n        val = reserved_binaries.get(c, None)\n\n        if not binary_values:\n            binary_values.append(1)\n\n        if val == binary_values[-1]:\n            print('NO')\n            break\n\n        if not val:\n            val = 1 if binary_values[-1] == 0 else 0\n        reserved_binaries[c] = val\n\n        binary_values.append(val)\n    else:\n        print('YES')\n</code></pre>"},{"location":"problems/1807/#d_odd_queries","title":"D_Odd_Queries","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    n, q = map(int, input().split())\n    array = list(map(int, input().split()))\n    prefix_sum = [0] * (n + 1)\n\n    for i, a in enumerate(array):\n        prefix_sum[i + 1] = a + prefix_sum[i]\n\n    results = []\n    for _ in range(q):\n        l, r, k = map(int, input().split())\n        l -= 1\n        r -= 1\n        sum_modified = prefix_sum[l] + (r - l + 1) * k + prefix_sum[-1] - prefix_sum[r + 1]\n\n        if sum_modified % 2 == 1:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    print(\"\\n\".join(results))\n</code></pre>"},{"location":"problems/1807/#e_interview","title":"E_Interview","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    piles = list(map(int, input().split()))\n\n    prefix_sum = [0]\n    for pile in piles:\n        prefix_sum.append(prefix_sum[-1] + pile)\n\n    left = 1\n    right = n\n\n    # Binary search to find the pile with the special stone\n    while right &gt; left:\n        mid = (right + left) // 2\n\n        query_piles = list(range(left, mid + 1))\n\n        # Send the query and flush the output\n        print(\"?\", len(query_piles), *query_piles, flush=True)\n\n        total_weight = int(input())\n\n        # Check which half the special stone is in\n        if total_weight == prefix_sum[mid] - prefix_sum[left - 1]:\n            left = mid + 1\n        else:\n            right = mid\n\n    # Output the index of the pile with the special stone\n    print(\"!\", (left + right) // 2, flush=True)\n</code></pre>"},{"location":"problems/1807/#f_bouncy_ball","title":"F_Bouncy_Ball","text":""},{"location":"problems/1807/#g_1_subsequence_addition_easy_version","title":"G_1_Subsequence_Addition_Easy_Version","text":""},{"location":"problems/1807/#g_2_subsequence_addition_hard_version","title":"G_2_Subsequence_Addition_Hard_Version","text":""},{"location":"problems/1808/","title":"1808","text":""},{"location":"problems/1808/#a_lucky_numbers","title":"A_Lucky_Numbers","text":""},{"location":"problems/1808/#description","title":"Description","text":"<p>Hateehc is a Martian blogger who wants to buy a starship with the luckiest number. The luckiness of a number is the difference between its largest and smallest digits. </p> <p>For example, the luckiness of the number <code>142857</code> is <code>8 - 1 = 7</code>, and the luckiness of the number <code>111</code> is <code>0</code> because all its digits are the same.</p> <p>In a store, there are starships with numbers from <code>\ud835\udc59</code> to <code>\ud835\udc5f</code>. You need to help Hateehc find the starship with the luckiest number.</p> <p>Logic to solve the problem:</p> <ol> <li>Iterate through the range of starship numbers <code>[\ud835\udc59, \ud835\udc5f]</code>.</li> <li>For each number in the range, find the luckiness (the difference between the largest and smallest digits).</li> <li>Keep track of the maximum luckiness found so far and the corresponding starship number.</li> <li>Stop the iteration if the maximum luckiness is equal to 9, as this is the highest possible luckiness.</li> <li>Return the starship number with the highest luckiness.</li> </ol> <pre><code>def luck(n):\n    digits = [int(d) for d in str(n)]\n    return max(digits) - min(digits)\n\ndef solve():\n    l, r = map(int, input().split())\n    res = l\n    max_luck = luck(l)\n\n    for i in range(l + 1, min(r + 1, l + 101)):\n        curr_luck = luck(i)\n        if curr_luck &gt; max_luck:\n            max_luck = curr_luck\n            res = i\n\n        if max_luck == 9:\n            break\n\n    print(res)\n\nfor _ in range(int(input())):\n    solve()\n</code></pre>"},{"location":"problems/1809/","title":"1809","text":"<p>Educational Codeforces Round 145 (Rated for Div. 2)</p> <p>TODO: B+</p>"},{"location":"problems/1809/#a_garland","title":"A_Garland","text":"<pre><code>def solve(s):\n    if all(c == s[0] for c in s):\n        return -1\n    elif s.count(s[0]) == 3 or s.count(s[1]) == 3:\n        return 6\n    else:\n        return 4\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(solve(s))\n</code></pre>"},{"location":"problems/1809/#b_points_on_plane","title":"B_Points_on_Plane","text":"<pre><code>import math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = math.isqrt(n)\n    if a**2 == n:\n        a -= 1\n\n    print(a)\n</code></pre>"},{"location":"problems/1809/#c_sum_on_subarrays","title":"C_Sum_on_Subarrays","text":""},{"location":"problems/1809/#description","title":"Description","text":"<p>You are given two numbers, 'n' and 'k'. Your task is to create an array of length 'n' with the sum of the elements equal to 'k'. The array can contain any integer numbers, but there is a condition - the sum of any contiguous subarray should be non-positive (less than or equal to 0).</p> <p>You need to find an array that satisfies the given condition.</p> <p>Example:</p> <p>Input:</p> <p><code>n = 3, k = 5</code></p> <p>Output:</p> <p><code>[-1, 2, -6]</code></p> <pre><code>def solve(n, k):\n    res = [-1000] * n\n    if k == 0:\n        return ' '.join(map(str, res))\n\n    for i in range(n):\n        possible = (i+1) * (i+2) // 2\n        res[i] = 2\n\n        if possible == k:\n            break\n\n        if k - possible &lt;= i+1:\n            if k - possible == i+1:\n                res[i+1] = -1\n            else:\n                x = 2 * (i+1) + 1\n                x -= 2 * (k - possible)\n                res[i+1] = -x\n\n            break\n\n    return ' '.join(map(str, res))\n\n\nfor _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    print(solve(n, k))\n</code></pre>"},{"location":"problems/1809/#d_binary_string_sorting","title":"D_Binary_String_Sorting","text":""},{"location":"problems/1809/#description_1","title":"Description","text":"<p>The idea of this solution is to iterate through the binary string, tracking the counts of zeros and ones. It evaluates the cost of sorting the string by considering various operations, such as swapping consecutive elements or removing elements. </p> <p>By comparing the costs of these different operations, the solution determines the minimum number of coins required to sort the string in non-decreasing order.</p> <pre><code>def solve():\n    s = input().strip()\n    n = len(s)\n    c0 = s.count('0')\n    c1 = 0\n    res = c0 * (10**12 + 1)\n\n    for i in range(n - 1):\n        if s[i] == '1':\n            c1 += 1\n        else:\n            c0 -= 1\n\n        if s[i] == '1' and s[i + 1] == '0':\n            res = min(res, (c0 + c1 - 2) * (10**12 + 1) + 10**12)\n        else:\n            res = min(res, (c0 + c1) * (10**12 + 1))\n\n    res = min(res, s.count('1') * (10**12 + 1))\n    print(res)\n\n\nfor _ in range(int(input())):\n    solve()\n</code></pre>"},{"location":"problems/1810/","title":"1810","text":""},{"location":"problems/1810/#a_beautiful_sequence","title":"A_Beautiful_Sequence","text":"<pre><code>def solve():\n    n = int(input())\n    ar = list(map(int, input().split()))\n    for i in range(n):\n        if(ar[i] &lt;= i + 1):\n            print(\"YES\")\n            return\n    print(\"NO\")\n\nfor _ in range(int(input())):\n    solve()\n</code></pre>"},{"location":"problems/1810/#b_candies","title":"B_Candies","text":""},{"location":"problems/1810/#description","title":"Description","text":"<p>The solution to this problem focuses on manipulating the number of candies by applying either the first or second spell. The idea is to check if it is possible to reach the target number of candies (n) within 40 steps. </p> <p>For each step, the algorithm determines whether it is better to use the first or the second spell based on whether the result of the spell will be closer to the target number. </p> <p>The algorithm continues applying spells and updating the number of candies until it reaches the target number or reaches the 40-step limit. </p> <p>If the target is reached, the sequence of spells is printed, otherwise, it prints -1.</p> <pre><code>def solve():\n    n = int(input())\n\n    if n % 2 == 0:\n        print(-1)\n        return\n\n    res = []\n    while n != 1:\n        if (n + 1) // 2 % 2 == 1:\n            n += 1\n            res.append(1)\n        else:\n            n -= 1\n            res.append(2)\n        n //= 2\n\n    res.reverse()\n    print(len(res))\n    print(' '.join(map(str, res)))\n\nfor _ in range(int(input())):\n    solve()\n</code></pre>"},{"location":"problems/1810/#c_make_it_permutation","title":"C_Make_It_Permutation","text":"<pre><code>def solve():\n    n, c, d = map(int, input().split())\n    ar = list(map(int, input().split()))\n\n    l = 0\n    r = 0\n\n    res = c * n + d\n    min_cost = 0\n\n    ar.sort()\n    if ar[0] != 1:\n        res = min(res, c * n + d)\n\n    for i in range(n):\n        r = ar[i]\n        to_remove = n - i - 1\n\n        if l == r:\n            min_cost += c\n        elif r == l + 1:\n            l = r\n            min_cost += 0\n        else:\n            min_cost += d * (max(0, r - l - 1))\n            l = r\n\n        res = min(res, min_cost + c * to_remove)\n\n    print(res)\n\nfor _ in range(int(input())):\n    solve()\n</code></pre>"},{"location":"problems/1812/","title":"1812","text":""},{"location":"problems/1812/#a_are_you_a_robot","title":"A_Are_You_a_Robot","text":"<pre><code>print('security')\n</code></pre>"},{"location":"problems/1812/#b_was_it_rated","title":"B_Was_it_Rated","text":""},{"location":"problems/1812/#description","title":"Description","text":"<p>The input to the problem represents a Codeforces contest ID. Out of the first 25 Codeforces contests, the only unrated ones had IDs 15, 20, and 21.</p> <pre><code>n = int(input())\na = [15, 20, 21]\nif n in a:\n    print('NO')\nelse:\n    print('YES')\n</code></pre>"},{"location":"problems/1812/#c_digits","title":"C_Digits","text":"<pre><code>pi = '314159265358979323846264338327950288419716939937510'\n\nfor i in range(int(input())):\n    res = 1\n    for _ in range(int(pi[i])):\n        res *= int(input())\n    print(res)\n</code></pre>"},{"location":"problems/1816/","title":"1816","text":""},{"location":"problems/1816/#a_ian_visits_mary","title":"A_Ian_Visits_Mary","text":""},{"location":"problems/1816/#description","title":"Description","text":"<p>Ian and Mary are frogs living on a grid (Cartesian coordinate plane) with integer coordinates. Ian starts at point (0,0), and Mary is at point (a, b). </p> <p>Ian wants to reach Mary in at most two jumps. Ian can only jump from one point with integer coordinates to another point with integer coordinates without landing on any other integer-coordinate point in between.</p> <ol> <li>Ian can always reach Mary in two jumps.</li> <li>The first jump can either be to a point on the same diagonal as Mary's position or to a point with the same x or y coordinate.</li> <li>In this solution, Ian jumps to the point (a - 1, 1) if a &gt; 0 or to the point (1, 1) if a = 0. This guarantees that no other integer-coordinate points are on the line segment between the starting point and the first jump point.</li> <li>In the second jump, Ian jumps directly to Mary's position (a, b).</li> </ol> <pre><code>def solve():\n    a, b = map(int, input().split())\n    if a &gt; 0:\n        print(2)\n        print(a - 1, 1)\n        print(a, b)\n    else:\n        print(2)\n        print(1, 1)\n        print(a, b)\n\n\nfor _ in range(int(input())):\n    solve()\n</code></pre>"},{"location":"problems/1816/#b_grid_reconstruction","title":"B_Grid_Reconstruction","text":""},{"location":"problems/1816/#description_1","title":"Description","text":"<ol> <li>Start by placing the maximum value (2 * \ud835\udc5b) in the top-left cell (1, 1), and the second maximum value (2 * \ud835\udc5b - 1) in the bottom-right cell (2, \ud835\udc5b).</li> <li>Fill the remaining cells in the first row and the second row using the remaining numbers in descending order while alternating rows.</li> <li>If the row has an even number of cells, start filling the row from the second cell, otherwise start from the first cell.</li> </ol> <pre><code>def solve():\n    n = int(input())\n    grid = [[None] * n for _ in range(2)]\n    grid[0][0] = n * 2\n    grid[-1][-1] = n * 2 - 1\n\n    for i in range(2):\n        tmp1 = n * 2 - 2 - i % 2\n        tmp2 = (i + 1) % 2 + 1\n\n        for j in range(n):\n            if grid[i][j] is None:\n                if (i + j) % 2:\n                    grid[i][j] = tmp2\n                    tmp2 += 2\n                else:\n                    grid[i][j] = tmp1\n                    tmp1 -= 2\n\n    for line in grid:\n        print(*line)\n\n\nfor _ in range(int(input())):\n    solve()\n</code></pre>"}]}