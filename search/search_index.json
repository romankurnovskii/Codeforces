{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Codeforces Solutions"},{"location":"#build","title":"Build","text":"<pre><code>python -m venv .venv\n. ./.venv/bin/activate\npip install -r requirements.txt\npython parse_solutions.py\n\nmkdocs serve\nmkdocs build\n</code></pre>"},{"location":"problems/1742/","title":"1742 Problems","text":"<p>Codeforces Round 827 (Div. 4)</p>"},{"location":"problems/1742/#a_sum","title":"A_Sum","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    arr = list(map(int, input().split()))\n    arr.sort()\n    if arr[0] + arr[1] == arr[2]:\n        print('YES')\n    else:\n        print('NO')\n</code></pre>"},{"location":"problems/1742/#b_increasing","title":"B_Increasing","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(\"YES\" if len(set(arr)) == n else \"NO\")\n</code></pre>"},{"location":"problems/1742/#c_stripes","title":"C_Stripes","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    input()\n    grid = [input() for _ in range(8)]\n    for row in grid:\n        if all(c == 'R' for c in row):\n            print('R')\n            break\n    else:\n        print('B')\n</code></pre>"},{"location":"problems/1742/#d_coprime","title":"D_Coprime","text":"<pre><code>import math\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    ss = [-1] * 1001\n    for i in range(n):\n        ss[s[i]] = i\n    res = -1\n    for i in range(1, 1001):\n        if ss[i] == -1:\n            continue\n        for j in range(i, 1001):\n            if ss[j] != -1 and math.gcd(i, j) == 1:\n                res = max(res, ss[i] + ss[j] + 2)\n    print(res)\n</code></pre>"},{"location":"problems/1742/#e_scuza","title":"E_Scuza","text":"<pre><code>from bisect import bisect\n\nt = int(input())\n\nfor _ in range(t):\n    n, q = map(int, input().split())\n    input_numbers = list(map(int, input().split()))\n    arr = [0] + input_numbers + [1e9 + 7]  # 1000000007\n    b = list(map(int, input().split()))\n\n    _arr = arr.copy()\n    for i in range(1, n + 2):\n        _arr[i] += _arr[i - 1]\n        arr[i] = max(arr[i], arr[i - 1])\n\n    for i in range(q):\n        b[i] = _arr[bisect(arr, b[i]) - 1]\n\n    print(' '.join(map(str, b)))\n</code></pre>"},{"location":"problems/1742/#f_smaller","title":"F_Smaller","text":"<pre><code>t = int(input())\n\n\ndef lower(x, y):\n    if any(yi &gt; 0 for yi in y[98:]):\n        return True\n\n    if x[97] &lt; y[97] and all(xi == 0 for xi in x[98:]):\n        return True\n\n    return False\n\n\nfor _ in range(t):\n    q = int(input())\n    s = [0] * 128\n    t = [0] * 128\n    s[ord('a')] = 1\n    t[ord('a')] = 1\n\n    for _ in range(q):\n        d, k, x = input().split()\n        d, k = int(d), int(k)\n\n        if d == 1:\n            for c in x:\n                s[ord(c)] += k\n        else:\n            for c in x:\n                t[ord(c)] += k\n\n        print(\"YES\" if lower(s, t) else \"NO\")\n</code></pre>"},{"location":"problems/1742/#g_orray","title":"G_Orray","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = []\n\n    vis = 0\n    while a:\n        # Find the index of the element with the highest bitwise AND with the complement of visited\n        idx = max(range(len(a)), key=lambda i: a[i] &amp; ~vis) \n\n        if not a[idx] &amp; ~vis:\n            break\n\n        res.append(a.pop(idx))\n        vis |= res[-1]\n\n    res.extend(a)\n\n    print(\" \".join(str(x) for x in res))\n</code></pre>"},{"location":"problems/1807/","title":"1807 Problems","text":"<p>Codeforces Round 859 (Div. 4)</p> <p>TODO: F, G1, G2</p>"},{"location":"problems/1807/#a_plus_or_minus","title":"A_Plus_or_Minus","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print('+' if a + b == c else '-')\n</code></pre>"},{"location":"problems/1807/#b_grab_the_candies","title":"B_Grab_the_Candies","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n\n    m = 0\n    b = 0\n\n    if n == 1:\n        print('YES' if ar[0] % 2 == 0 else 'NO')\n    else:\n        for x in ar:\n            if x % 2 == 0:\n                m += x\n            else:\n                b += x\n        print('YES' if m &gt; b else 'NO')\n</code></pre>"},{"location":"problems/1807/#c_find_and_replace","title":"C_Find_and_Replace","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = input()\n\n    reserved_binaries = {}\n    binary_values = []\n\n    for c in s:\n        val = reserved_binaries.get(c, None)\n\n        if not binary_values:\n            binary_values.append(1)\n\n        if val == binary_values[-1]:\n            print('NO')\n            break\n\n        if not val:\n            val = 1 if binary_values[-1] == 0 else 0\n        reserved_binaries[c] = val\n\n        binary_values.append(val)\n    else:\n        print('YES')\n</code></pre>"},{"location":"problems/1807/#d_odd_queries","title":"D_Odd_Queries","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    n, q = map(int, input().split())\n    array = list(map(int, input().split()))\n    prefix_sum = [0] * (n + 1)\n\n    for i, a in enumerate(array):\n        prefix_sum[i + 1] = a + prefix_sum[i]\n\n    results = []\n    for _ in range(q):\n        l, r, k = map(int, input().split())\n        l -= 1\n        r -= 1\n        sum_modified = prefix_sum[l] + (r - l + 1) * k + prefix_sum[-1] - prefix_sum[r + 1]\n\n        if sum_modified % 2 == 1:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    print(\"\\n\".join(results))\n</code></pre>"},{"location":"problems/1807/#e_interview","title":"E_Interview","text":"<pre><code>t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    piles = list(map(int, input().split()))\n\n    prefix_sum = [0]\n    for pile in piles:\n        prefix_sum.append(prefix_sum[-1] + pile)\n\n    left = 1\n    right = n\n\n    # Binary search to find the pile with the special stone\n    while right &gt; left:\n        mid = (right + left) // 2\n\n        query_piles = list(range(left, mid + 1))\n\n        # Send the query and flush the output\n        print(\"?\", len(query_piles), *query_piles, flush=True)\n\n        total_weight = int(input())\n\n        # Check which half the special stone is in\n        if total_weight == prefix_sum[mid] - prefix_sum[left - 1]:\n            left = mid + 1\n        else:\n            right = mid\n\n    # Output the index of the pile with the special stone\n    print(\"!\", (left + right) // 2, flush=True)\n</code></pre>"},{"location":"problems/1807/#f_bouncy_ball","title":"F_Bouncy_Ball","text":""},{"location":"problems/1807/#g_1_subsequence_addition_easy_version","title":"G_1_Subsequence_Addition_Easy_Version","text":""},{"location":"problems/1807/#g_2_subsequence_addition_hard_version","title":"G_2_Subsequence_Addition_Hard_Version","text":""}]}